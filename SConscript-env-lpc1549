# Modifies the environment to build mbed firmware for the LPC1549 using GCC-ARM
import os, os.path

Import('env')

env.Append(CCFLAGS = '-O1 -g')

env.ConfigureMbedTarget('LPC1549', File('mbed/targets/targets.json').srcnode())
env.Append(CXXFLAGS = '-std=c++11')  # override the mbed default

# Build the mbed library as a static library
mbed_paths = env.GetMbedSourceDirectories('mbed')
env.Append(CPPPATH=[x.srcnode() for x in mbed_paths])  # this allows duplicate=0

rtos_paths = [
  Dir('mbed/rtos'),
  Dir('mbed/rtos/rtx/TARGET_CORTEX_M'),
  Dir('mbed/rtos/rtx/TARGET_CORTEX_M/TARGET_M3'),
  Dir('mbed/rtos/rtx/TARGET_CORTEX_M/TARGET_M3/TOOLCHAIN_GCC'),
]
env.Append(CPPPATH=[x.srcnode() for x in rtos_paths])  # this allows duplicate=0

env['MBED_LINKSCRIPT'] = env.GetMbedLinkscript(mbed_paths)
env.Append(CPPDEFINES=[
    'MBED_CONF_PLATFORM_STDIO_BAUD_RATE=115200',
    'MBED_CONF_PLATFORM_DEFAULT_SERIAL_BAUD_RATE=115200',
    'MBED_CONF_PLATFORM_STDIO_FLUSH_AT_EXIT=1',
    'MBED_CONF_PLATFORM_STDIO_CONVERT_NEWLINES=0',
    'OS_CLOCK=12000000',  # for RTOS
])

# Build the USBDevice library as a dependency
usb_class_dirs = [
  'mbed/features/unsupported/USBDevice/USBAudio',
  'mbed/features/unsupported/USBDevice/USBHID',
  'mbed/features/unsupported/USBDevice/USBMIDI',
  'mbed/features/unsupported/USBDevice/USBMSD',
  'mbed/features/unsupported/USBDevice/USBSerial',
]

usb_device_dirs = [
  'mbed/features/unsupported/USBDevice/USBDevice',
]

usb_srcs = [
  'mbed/features/unsupported/USBDevice/USBDevice/USBDevice.cpp',
  'mbed/features/unsupported/USBDevice/USBDevice/USBHAL_LPC11U.cpp',
]

for path in usb_class_dirs:
  usb_srcs.extend(Glob(os.path.join(path,'*.cpp')))

usb_dirs = usb_class_dirs + usb_device_dirs
env.Append(CPPPATH=usb_dirs)

env_mbed = env.Clone()
env_mbed.Append(CCFLAGS='-w')  # don't care about errors in dependencies
mbed_sources = env.GetMbedSources(mbed_paths)
mbed_sources.remove(File('mbed/targets/TARGET_NXP/TARGET_LPC15XX/device/system_LPC15xx.c'))
mbed_sources.append(File('common/lpc15xx_overrides/system_LPC15xx.c'))
mbed_lib = env_mbed.StaticLibrary('mbed', mbed_sources)

rtos_sources = env.GetMbedSources(rtos_paths)
rtos_lib = env_mbed.StaticLibrary('rtos', rtos_sources)
env.Prepend(LIBS=rtos_lib)

usb_lib = env_mbed.StaticLibrary('usbdevice', usb_srcs)
env.Append(LIBS=usb_lib)

env.Append(LINKFLAGS=[
  '-Wl,--whole-archive',  # used to compile mbed HAL, which uses funky weak symbols
  mbed_lib,
  '-Wl,--no-whole-archive',
])

env.Prepend(LIBS=mbed_lib)
